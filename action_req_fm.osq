/******************************************************************************
*  Frame  - Action Required Marker File Maintenance
*  Author - Gary King
*
*  Date   - 20.09.94
*  Type   - Online Frame
*
*  Source - action_req_fm.osq
*  Form   - action_req_fm
*
*  Parameters expected - None.
*
*******************************************************************************
*  Version | Date     | Coded | Description of changes made
***********|**********|*******|************************************************
*  1.0     | 20.09.94 | GAK   | Original code
******************************************************************************/

INITIALIZE
(
/*******************************************************
** INGRES ERROR HANDLING VARIABLES
*******************************************************/
    IIrowcount  =  INTEGER(4) NOT NULL,
    IIerrorno   =  INTEGER(4) NOT NULL,
    hf_errtext  =  CHAR(256)  NOT NULL,

/*******************************************************
** FRAME SPECIFIC VARIABLES  
*******************************************************/
    IIint       =  INTEGER(4) NOT NULL, /* Holds procedure return values     */
    hf_code     =  INTEGER(1) NOT NULL, /* Holds returned code from popup    */
    IIchar1     =  CHAR(1)    NOT NULL, /* General single character variable */
    IIchar      =  CHAR(20)   NOT NULL, /* General purpose char variable     */
    hf_desc     =  CHAR(20)   NOT NULL, /* Holds returned desc from popup    */
)=
{
    /******************************************************
    ** Initialise form field values and set to query mode
    *******************************************************/

    date = DATE('now');

    SET_FORMS FRS(MAP(FRSKEY4)='pf11');
    SET_FORMS FRS(LABEL(FRSKEY4)='F11');
    SET_FORMS FRS(MAP(FRSKEY3)='pf12');
    SET_FORMS FRS(LABEL(FRSKEY3)='F12');

    SET_FORMS FRS (ACTIVATE(previousfield) = 1);

    SET_FORMS FRS (timeout = :gc_timeout);
    
    /*********************************************************
    ** Set table mode to read and populate from the database
    **********************************************************/

    INITTABLE iitf 'READ';

    iitf := SELECT action_code = action_code,
		   action_desc = action_desc
	      FROM action_req
	  ORDER BY 1;

    /**************************
    ** Check For INGRES Error 
    ***************************/
    INQUIRE_INGRES (IIerrorno  = ERRORNO,
		    hf_errtext = ERRORTEXT,
		    IIrowcount = ROWCOUNT);

    IF IIerrorno != 0 THEN
	ROLLBACK;
	MESSAGE '-01- INGRES error in select ' 
		+ :hf_errtext WITH STYLE = POPUP;
	RETURN;
    ENDIF;

    COMMIT;
}

ON TIMEOUT =
{
CALLFRAME timeout_popup();
}

'Help', KEY FRSKEY1 =
{
    callproc help_proc(SUBJECT = 
	       'Help on Action Required by Reps frame',
	       file = :gc_help_dir+'action_req_fm.hlp');
}


'Insert', KEY FRSKEY9 =
{
    hf_code = 0;
    hf_desc = '';

    /*******************************************************
    ** Call popup to insert new action required description
    ********************************************************/

    IIint = CALLFRAME action_req_popup(screenmode  = 'INSERT',
				       code        = BYREF(hf_code),
				       description = BYREF(hf_desc));

    IF IIint = 0 THEN /** New row has been inserted **/

	/**********************************
	** Reselect data into table field
	***********************************/

	INITTABLE iitf 'READ';

	iitf := SELECT action_code = action_code,
		       action_desc = action_desc
		  FROM action_req
	      ORDER BY 1;

	/**************************
	** Check For INGRES Error 
	***************************/
	INQUIRE_INGRES (IIerrorno  = ERRORNO,
			hf_errtext = ERRORTEXT,
			IIrowcount = ROWCOUNT);

	IF IIerrorno != 0 THEN
	    ROLLBACK;
	    MESSAGE '-02- INGRES error in select ' 
		    + :hf_errtext WITH STYLE = POPUP;
	    RETURN;
	ENDIF;

	COMMIT;

    ELSEIF IIint = -1 THEN
	/*******************************************************
	** Returned -1 : INGRES Error return to calling frame 
	********************************************************/
	RETURN; 
    ENDIF;

    /*****************************************************************
    ** If returned value is not 0 or -1 then insert cancelled, resume
    ******************************************************************/

    RESUME;
}


'Update', KEY FRSKEY4 =
{
    /** Set temporary description to be passed by reference **/

    hf_desc = iitf.action_desc; 

    /***************************************************
    ** Call popup to update action required description
    ****************************************************/

    IIint = CALLFRAME action_req_popup(screenmode  = 'UPDATE',
				       code        = :iitf.action_code,
				       description = BYREF(hf_desc));
    IF IIint = 0 THEN
	/************************************************************
	** Returned 0 : successful update, reset description in iitf 
	*************************************************************/
	iitf.action_desc = hf_desc;

    ELSEIF IIint = -1 THEN
	/*******************************************************
	** Returned -1 : INGRES Error return to calling frame 
	********************************************************/
	RETURN; 
    ENDIF;

    /*****************************************************************
    ** If returned value is not 0 or -1 then update cancelled, resume
    ******************************************************************/

    RESUME;
}


'Delete', KEY FRSKEY14 =
{
    /***************************
    ** Prompt for confirmation
    ****************************/

    IIchar1 = '';

    WHILE UPPERCASE(IIchar1) != 'N' AND
	  UPPERCASE(IIchar1) != 'Y' 
    DO
	IIchar1 = PROMPT 'Delete code ' + TRIM(CHAR(:iitf.action_code)) +
			 '.  Confirm (Y/N) ?' WITH STYLE = POPUP;
    ENDWHILE;

    IF UPPERCASE(IIchar1) = 'Y' THEN
	/********************
	** Delete confirmed
	*********************/

	DELETE FROM action_req
	      WHERE action_code = :iitf.action_code;

	/**************************
	** Check For INGRES Error 
	***************************/
	INQUIRE_INGRES (IIerrorno  = ERRORNO,
			hf_errtext = ERRORTEXT,
			IIrowcount = ROWCOUNT);

	IF IIerrorno != 0 THEN
	    ROLLBACK;
	    MESSAGE '-03- INGRES error in DELETE ' 
		    + :hf_errtext WITH STYLE = POPUP;
	    RETURN;
	ENDIF;

	COMMIT;

	DELETEROW iitf;
    ENDIF;

    RESUME;
}


'End', KEY FRSKEY3 =
{
    RETURN;
}
